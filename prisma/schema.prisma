generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  wallet          String    @unique
  email           String?   @unique
  isHyperdogHolder Boolean  @default(false)
  hyperdogId      Int?
  tier            UserTier  @default(FREE)
  
  questionsToday  Int      @default(0)
  lastResetDate   DateTime @default(now())
  totalQuestions  Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  sessions        Session[]
  subscriptions   Subscription[]
  questions       Question[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  status    SubscriptionStatus
  tier      SubscriptionTier
  
  startDate DateTime @default(now())
  endDate   DateTime?
  
  stripeCustomerId       String?
  stripeSubscriptionId   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  question  String
  answer    String
  tokens    Int
  cost      Float
  
  cached    Boolean  @default(false)
  
  createdAt DateTime @default(now())
}

model Project {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  category    String
  status      ProjectStatus
  
  description String
  website     String?
  twitter     String?
  discord     String?
  github      String?
  
  tvl         Float?
  users       Int?
  volume24h   Float?
  
  collarScore Float?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  research    Research[]
}

model Research {
  id          String   @id @default(cuid())
  slug        String   @unique
  title       String
  summary     String
  content     String   @db.Text
  
  type        ResearchType
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  
  published   Boolean  @default(false)
  premium     Boolean  @default(false)
  
  readTime    Int
  views       Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  publishedAt DateTime?
}

enum UserTier {
  FREE
  HYPERDOG
  PACK_PRO
  PUBLIC_PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  TRIALING
}

enum SubscriptionTier {
  PACK_PRO
  PUBLIC_PRO
}

enum ProjectStatus {
  ACTIVE
  BETA
  DEVELOPMENT
  DEPRECATED
}

enum ResearchType {
  DEEP_DIVE
  QUICK_TAKE
  RISK_ALERT
  WEEKLY_REPORT
}
